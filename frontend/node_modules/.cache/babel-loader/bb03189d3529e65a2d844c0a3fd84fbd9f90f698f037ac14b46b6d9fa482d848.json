{"ast":null,"code":"var _jsxFileName = \"/Users/shuhang/Desktop/USC homework/DSCI551/movie-review-website/src/components/UserManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport moviesData from './movies.json';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserManager() {\n  _s();\n  const [movies, setMovies] = useState(moviesData);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [userName, setUserName] = useState('');\n  const [selectedMovieId, setSelectedMovieId] = useState(null); // State to track the selected movie ID\n\n  const filteredMovies = movies.filter(movie => movie.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  const updateComment = (movieId, commentId) => {\n    const newText = prompt(\"Update your comment:\");\n    if (newText !== null && newText.trim() !== '') {\n      setMovies(movies.map(movie => {\n        if (movie.id === movieId) {\n          return {\n            ...movie,\n            comments: movie.comments.map(comment => {\n              if (comment.id === commentId) {\n                return {\n                  ...comment,\n                  text: newText\n                };\n              }\n              return comment;\n            })\n          };\n        }\n        return movie;\n      }));\n    }\n  };\n  const deleteComment = (movieId, commentId) => {\n    setMovies(movies.map(movie => {\n      if (movie.id === movieId) {\n        return {\n          ...movie,\n          comments: movie.comments.filter(comment => comment.id !== commentId)\n        };\n      }\n      return movie;\n    }));\n  };\n  const addComment = movieId => {\n    const updatedMovies = movies.map(movie => {\n      if (movie.id === movieId) {\n        const newCommentId = movie.comments.length > 0 ? Math.max(...movie.comments.map(c => c.id)) + 1 : 1;\n        const updatedMovie = {\n          ...movie,\n          comments: [...movie.comments, {\n            id: newCommentId,\n            text: commentText,\n            user: userName\n          }]\n        };\n        return updatedMovie;\n      }\n      return movie;\n    });\n    setMovies(updatedMovies);\n    setCommentText('');\n    setUserName('');\n    // Keep the selected movie selected after adding a comment\n  };\n  const toggleSelectMovie = movieId => {\n    setSelectedMovieId(selectedMovieId === movieId ? null : movieId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a movie\",\n      value: searchQuery,\n      onChange: e => setSearchQuery(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), filteredMovies.length > 0 && filteredMovies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        onClick: () => toggleSelectMovie(movie.id),\n        style: {\n          cursor: 'pointer',\n          color: selectedMovieId === movie.id ? 'blue' : 'black'\n        },\n        children: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), selectedMovieId === movie.id && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: movie.comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [comment.text, \" - \", comment.user]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userName,\n          onChange: e => setUserName(e.target.value),\n          placeholder: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: commentText,\n          onChange: e => setCommentText(e.target.value),\n          placeholder: \"Leave a comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addComment(movie.id),\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(UserManager, \"vksq7HCnljklkMuMPsRz7YCiUYE=\");\n_c = UserManager;\nexport default UserManager;\nvar _c;\n$RefreshReg$(_c, \"UserManager\");","map":{"version":3,"names":["React","useState","moviesData","jsxDEV","_jsxDEV","Fragment","_Fragment","UserManager","_s","movies","setMovies","searchQuery","setSearchQuery","commentText","setCommentText","userName","setUserName","selectedMovieId","setSelectedMovieId","filteredMovies","filter","movie","name","toLowerCase","includes","updateComment","movieId","commentId","newText","prompt","trim","map","id","comments","comment","text","deleteComment","addComment","updatedMovies","newCommentId","length","Math","max","c","updatedMovie","user","toggleSelectMovie","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","style","margin","onClick","cursor","color","_c","$RefreshReg$"],"sources":["/Users/shuhang/Desktop/USC homework/DSCI551/movie-review-website/src/components/UserManager.js"],"sourcesContent":["import React, { useState } from 'react';\nimport moviesData from './movies.json';\n\nfunction UserManager() {\n  const [movies, setMovies] = useState(moviesData);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [userName, setUserName] = useState('');\n  const [selectedMovieId, setSelectedMovieId] = useState(null); // State to track the selected movie ID\n\n  const filteredMovies = movies.filter(movie =>\n    movie.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const updateComment = (movieId, commentId) => {\n    const newText = prompt(\"Update your comment:\");\n    if (newText !== null && newText.trim() !== '') {\n      setMovies(movies.map(movie => {\n        if (movie.id === movieId) {\n          return {\n            ...movie,\n            comments: movie.comments.map(comment => {\n              if (comment.id === commentId) {\n                return { ...comment, text: newText };\n              }\n              return comment;\n            })\n          };\n        }\n        return movie;\n      }));\n    }\n  };\n\n  const deleteComment = (movieId, commentId) => {\n    setMovies(movies.map(movie => {\n      if (movie.id === movieId) {\n        return {\n          ...movie,\n          comments: movie.comments.filter(comment => comment.id !== commentId)\n        };\n      }\n      return movie;\n    }));\n  };\n\n  \n  const addComment = (movieId) => {\n    const updatedMovies = movies.map(movie => {\n      if (movie.id === movieId) {\n        const newCommentId = movie.comments.length > 0 ? Math.max(...movie.comments.map(c => c.id)) + 1 : 1;\n        const updatedMovie = {\n          ...movie,\n          comments: [...movie.comments, { id: newCommentId, text: commentText, user: userName }]\n        };\n        return updatedMovie;\n      }\n      return movie;\n    });\n    setMovies(updatedMovies);\n    setCommentText('');\n    setUserName('');\n    // Keep the selected movie selected after adding a comment\n  };\n\n  const toggleSelectMovie = (movieId) => {\n    setSelectedMovieId(selectedMovieId === movieId ? null : movieId);\n  };\n\n  return (\n    <div>\n      <h2>User Manager</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Search for a movie\"\n        value={searchQuery}\n        onChange={(e) => setSearchQuery(e.target.value)}\n      />\n      {filteredMovies.length > 0 && (\n        filteredMovies.map(movie => (\n          <div key={movie.id} style={{ margin: '10px 0' }}>\n            <h3\n              onClick={() => toggleSelectMovie(movie.id)}\n              style={{ cursor: 'pointer', color: selectedMovieId === movie.id ? 'blue' : 'black' }}\n            >\n              {movie.name}\n            </h3>\n            {selectedMovieId === movie.id && (\n              <>\n                <ul>\n                  {movie.comments.map(comment => (\n                    <li key={comment.id}>{comment.text} - {comment.user}</li>\n                  ))}\n                </ul>\n                <input\n                  type=\"text\"\n                  value={userName}\n                  onChange={(e) => setUserName(e.target.value)}\n                  placeholder=\"Your name\"\n                />\n                <input\n                  type=\"text\"\n                  value={commentText}\n                  onChange={(e) => setCommentText(e.target.value)}\n                  placeholder=\"Leave a comment\"\n                />\n                <button onClick={() => addComment(movie.id)}>Add Comment</button>\n              </>\n            )}\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default UserManager;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAACC,UAAU,CAAC;EAChD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9D,MAAMkB,cAAc,GAAGV,MAAM,CAACW,MAAM,CAACC,KAAK,IACxCA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACb,WAAW,CAACY,WAAW,CAAC,CAAC,CAC7D,CAAC;EAED,MAAME,aAAa,GAAGA,CAACC,OAAO,EAAEC,SAAS,KAAK;IAC5C,MAAMC,OAAO,GAAGC,MAAM,CAAC,sBAAsB,CAAC;IAC9C,IAAID,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7CpB,SAAS,CAACD,MAAM,CAACsB,GAAG,CAACV,KAAK,IAAI;QAC5B,IAAIA,KAAK,CAACW,EAAE,KAAKN,OAAO,EAAE;UACxB,OAAO;YACL,GAAGL,KAAK;YACRY,QAAQ,EAAEZ,KAAK,CAACY,QAAQ,CAACF,GAAG,CAACG,OAAO,IAAI;cACtC,IAAIA,OAAO,CAACF,EAAE,KAAKL,SAAS,EAAE;gBAC5B,OAAO;kBAAE,GAAGO,OAAO;kBAAEC,IAAI,EAAEP;gBAAQ,CAAC;cACtC;cACA,OAAOM,OAAO;YAChB,CAAC;UACH,CAAC;QACH;QACA,OAAOb,KAAK;MACd,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED,MAAMe,aAAa,GAAGA,CAACV,OAAO,EAAEC,SAAS,KAAK;IAC5CjB,SAAS,CAACD,MAAM,CAACsB,GAAG,CAACV,KAAK,IAAI;MAC5B,IAAIA,KAAK,CAACW,EAAE,KAAKN,OAAO,EAAE;QACxB,OAAO;UACL,GAAGL,KAAK;UACRY,QAAQ,EAAEZ,KAAK,CAACY,QAAQ,CAACb,MAAM,CAACc,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKL,SAAS;QACrE,CAAC;MACH;MACA,OAAON,KAAK;IACd,CAAC,CAAC,CAAC;EACL,CAAC;EAGD,MAAMgB,UAAU,GAAIX,OAAO,IAAK;IAC9B,MAAMY,aAAa,GAAG7B,MAAM,CAACsB,GAAG,CAACV,KAAK,IAAI;MACxC,IAAIA,KAAK,CAACW,EAAE,KAAKN,OAAO,EAAE;QACxB,MAAMa,YAAY,GAAGlB,KAAK,CAACY,QAAQ,CAACO,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGrB,KAAK,CAACY,QAAQ,CAACF,GAAG,CAACY,CAAC,IAAIA,CAAC,CAACX,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;QACnG,MAAMY,YAAY,GAAG;UACnB,GAAGvB,KAAK;UACRY,QAAQ,EAAE,CAAC,GAAGZ,KAAK,CAACY,QAAQ,EAAE;YAAED,EAAE,EAAEO,YAAY;YAAEJ,IAAI,EAAEtB,WAAW;YAAEgC,IAAI,EAAE9B;UAAS,CAAC;QACvF,CAAC;QACD,OAAO6B,YAAY;MACrB;MACA,OAAOvB,KAAK;IACd,CAAC,CAAC;IACFX,SAAS,CAAC4B,aAAa,CAAC;IACxBxB,cAAc,CAAC,EAAE,CAAC;IAClBE,WAAW,CAAC,EAAE,CAAC;IACf;EACF,CAAC;EAED,MAAM8B,iBAAiB,GAAIpB,OAAO,IAAK;IACrCR,kBAAkB,CAACD,eAAe,KAAKS,OAAO,GAAG,IAAI,GAAGA,OAAO,CAAC;EAClE,CAAC;EAED,oBACEtB,OAAA;IAAA2C,QAAA,gBACE3C,OAAA;MAAA2C,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB/C,OAAA;MACEgD,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,oBAAoB;MAChCC,KAAK,EAAE3C,WAAY;MACnB4C,QAAQ,EAAGC,CAAC,IAAK5C,cAAc,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,EACDhC,cAAc,CAACqB,MAAM,GAAG,CAAC,IACxBrB,cAAc,CAACY,GAAG,CAACV,KAAK,iBACtBjB,OAAA;MAAoBsD,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAZ,QAAA,gBAC9C3C,OAAA;QACEwD,OAAO,EAAEA,CAAA,KAAMd,iBAAiB,CAACzB,KAAK,CAACW,EAAE,CAAE;QAC3C0B,KAAK,EAAE;UAAEG,MAAM,EAAE,SAAS;UAAEC,KAAK,EAAE7C,eAAe,KAAKI,KAAK,CAACW,EAAE,GAAG,MAAM,GAAG;QAAQ,CAAE;QAAAe,QAAA,EAEpF1B,KAAK,CAACC;MAAI;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,EACJlC,eAAe,KAAKI,KAAK,CAACW,EAAE,iBAC3B5B,OAAA,CAAAE,SAAA;QAAAyC,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,EACG1B,KAAK,CAACY,QAAQ,CAACF,GAAG,CAACG,OAAO,iBACzB9B,OAAA;YAAA2C,QAAA,GAAsBb,OAAO,CAACC,IAAI,EAAC,KAAG,EAACD,OAAO,CAACW,IAAI;UAAA,GAA1CX,OAAO,CAACF,EAAE;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CACzD;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eACL/C,OAAA;UACEgD,IAAI,EAAC,MAAM;UACXE,KAAK,EAAEvC,QAAS;UAChBwC,QAAQ,EAAGC,CAAC,IAAKxC,WAAW,CAACwC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC7CD,WAAW,EAAC;QAAW;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eACF/C,OAAA;UACEgD,IAAI,EAAC,MAAM;UACXE,KAAK,EAAEzC,WAAY;UACnB0C,QAAQ,EAAGC,CAAC,IAAK1C,cAAc,CAAC0C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAChDD,WAAW,EAAC;QAAiB;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eACF/C,OAAA;UAAQwD,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAAChB,KAAK,CAACW,EAAE,CAAE;UAAAe,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACjE,CACH;IAAA,GA5BO9B,KAAK,CAACW,EAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA6Bb,CACN,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3C,EAAA,CA/GQD,WAAW;AAAAwD,EAAA,GAAXxD,WAAW;AAiHpB,eAAeA,WAAW;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}